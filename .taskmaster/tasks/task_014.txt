# Task ID: 14
# Title: Implement Serialization Support
# Status: in-progress
# Dependencies: 2, 3, 4, 5
# Priority: medium
# Description: Add JSON and YAML serialization support for measurements using Crystal's built-in serialization modules with custom converters
# Details:
Implement serialization using Crystal's JSON::Serializable and YAML::Serializable with custom converters:
```crystal
require "json"
require "yaml"

module Unit
  # Custom converter for BigDecimal precision preservation
  module BigDecimalConverter
    def self.from_json(parser : JSON::PullParser) : BigDecimal
      BigDecimal.new(parser.read_string)
    end
    
    def self.to_json(value : BigDecimal, json : JSON::Builder)
      json.string(value.to_s)
    end
    
    def self.from_yaml(ctx : YAML::ParseContext, node : YAML::Nodes::Node) : BigDecimal
      BigDecimal.new(node.value)
    end
    
    def self.to_yaml(value : BigDecimal, yaml : YAML::Nodes::Builder)
      yaml.scalar(value.to_s)
    end
  end
  
  # Custom converter for enum serialization with case-insensitive parsing
  module EnumConverter(T)
    def self.from_json(parser : JSON::PullParser) : T
      T.parse(parser.read_string.downcase.capitalize)
    end
    
    def self.to_json(value : T, json : JSON::Builder)
      json.string(value.to_s)
    end
    
    def self.from_yaml(ctx : YAML::ParseContext, node : YAML::Nodes::Node) : T
      T.parse(node.value.downcase.capitalize)
    end
    
    def self.to_yaml(value : T, yaml : YAML::Nodes::Builder)
      yaml.scalar(value.to_s)
    end
  end
  
  class Measurement(T, U)
    include JSON::Serializable
    include YAML::Serializable
    
    @[JSON::Field(converter: Unit::BigDecimalConverter)]
    @[YAML::Field(converter: Unit::BigDecimalConverter)]
    getter value : BigDecimal
    
    @[JSON::Field(converter: Unit::EnumConverter(U))]
    @[YAML::Field(converter: Unit::EnumConverter(U))]
    getter unit : U
  end
end
```
- Use custom converters for BigDecimal precision and enum handling
- Support case-insensitive enum parsing
- Crystal's serialization automatically handles type information
- Focus exclusively on JSON and YAML serialization formats

# Test Strategy:
Test round-trip JSON and YAML serialization preserves values and units, verify BigDecimal precision is maintained, test with various numeric types, test case-insensitive enum parsing, ensure invalid JSON/YAML raises appropriate errors, verify compatibility with Crystal's standard serialization

# Subtasks:
## 1. Create BigDecimalConverter for Precision Preservation [done]
### Dependencies: None
### Description: Implement a custom converter module that handles BigDecimal serialization as strings to preserve full precision in JSON and YAML
### Details:
Create src/unit/converters/big_decimal_converter.cr with:
- from_json method that parses string values to BigDecimal
- to_json method that converts BigDecimal to string representation
- from_yaml and to_yaml methods with similar functionality
- Proper error handling for invalid decimal strings
- Support for scientific notation and very large/small numbers
- Maintain full precision without floating-point conversion

## 2. Create Enhanced EnumConverter with Case-Insensitive Support [done]
### Dependencies: None
### Description: Implement a generic EnumConverter module that handles serialization and deserialization of enum values with case-insensitive parsing
### Details:
Create src/unit/converters/enum_converter.cr with:
- Generic module EnumConverter(T) that works with any enum type
- from_json method with case-insensitive enum parsing using T.parse
- to_json method that converts enum to string representation
- from_yaml and to_yaml methods with similar functionality
- Support for both uppercase and lowercase enum string values
- Graceful handling of enum aliases (Kg -> Kilogram)
- Error handling for invalid enum values during deserialization

## 3. Add JSON::Serializable and YAML::Serializable to Measurement Class [done]
### Dependencies: 14.1, 14.2
### Description: Include Crystal's built-in serialization modules and configure field annotations with custom converters
### Details:
Update src/unit/measurement.cr to:
- Include JSON::Serializable and YAML::Serializable modules
- Add @[JSON::Field(converter: Unit::BigDecimalConverter)] for value field
- Add @[YAML::Field(converter: Unit::BigDecimalConverter)] for value field
- Add @[JSON::Field(converter: Unit::EnumConverter(U))] for unit field
- Add @[YAML::Field(converter: Unit::EnumConverter(U))] for unit field
- Remove any custom to_json methods as Crystal handles serialization automatically
- Ensure proper require statements for converters

## 4. Create Comprehensive JSON and YAML Serialization Tests [pending]
### Dependencies: 14.3
### Description: Develop a full test suite covering all JSON and YAML serialization scenarios using Crystal's built-in serialization
### Details:
Create spec/unit/serialization_spec.cr with tests for:
- Round-trip JSON serialization for all measurement types
- Round-trip YAML serialization for all measurement types
- BigDecimal precision preservation with very large/small values
- Case-insensitive enum parsing in both JSON and YAML
- Serialization of measurements created from different numeric types
- Deserialization error handling (invalid JSON/YAML, wrong enum values)
- Compatibility with Crystal's standard JSON/YAML libraries
- Performance benchmarks for collections of measurements

