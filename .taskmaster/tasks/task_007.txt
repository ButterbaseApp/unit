# Task ID: 7
# Title: Implement Arithmetic Operations Module
# Status: done
# Dependencies: 6
# Priority: high
# Description: Add support for addition, subtraction, and scaling operations on measurements
# Details:
Create src/unit/arithmetic.cr:
```crystal
module Unit
  module Arithmetic
    def +(other : self) : self
      if @unit == other.unit
        self.class.new(@value + other.value, @unit)
      else
        converted = other.convert_to(@unit)
        self.class.new(@value + converted.value, @unit)
      end
    end
    
    def -(other : self) : self
      if @unit == other.unit
        self.class.new(@value - other.value, @unit)
      else
        converted = other.convert_to(@unit)
        self.class.new(@value - converted.value, @unit)
      end
    end
    
    def *(scalar : Number) : self
      self.class.new(@value * BigDecimal.new(scalar.to_s), @unit)
    end
    
    def /(scalar : Number) : self
      raise ArgumentError.new("Cannot divide by zero") if scalar == 0
      self.class.new(@value / BigDecimal.new(scalar.to_s), @unit)
    end
  end
end
```
- Automatically convert units during operations
- Maintain immutability by returning new instances
- Preserve precision using BigDecimal arithmetic
- Result maintains the unit of the left operand

# Test Strategy:
Test operations with same units, test automatic conversion with different units, verify precision preservation, test zero division handling, verify compile-time type safety prevents cross-type operations

# Subtasks:
## 1. Create Arithmetic Module Structure [done]
### Dependencies: None
### Description: Set up the basic module structure and file organization for arithmetic operations
### Details:
Create src/unit/arithmetic.cr file and define the Unit::Arithmetic module. Set up the module structure that will be included in the Measurement class. Ensure proper module namespacing and file organization following Crystal conventions.

## 2. Implement Addition Operation [done]
### Dependencies: 7.1
### Description: Implement the + operator for adding measurements with automatic unit conversion
### Details:
Implement the + method that handles both same-unit and different-unit additions. When units differ, convert the right operand to match the left operand's unit using the convert_to method. Return a new instance to maintain immutability. Use BigDecimal for precision.

## 3. Implement Subtraction Operation [done]
### Dependencies: 7.1
### Description: Implement the - operator for subtracting measurements with automatic unit conversion
### Details:
Implement the - method following the same pattern as addition. Handle unit conversion when units differ, maintain immutability by returning new instances, and use BigDecimal arithmetic for precision. Ensure proper handling of negative results.

## 4. Implement Scalar Multiplication and Division [done]
### Dependencies: 7.1
### Description: Implement * and / operators for scaling measurements by numeric values
### Details:
Implement multiplication (*) operator that accepts any Number type and converts it to BigDecimal for precision. Implement division (/) operator with zero-division protection. Both operations should return new instances with the same unit as the original measurement.

## 5. Integration Testing and Documentation [done]
### Dependencies: 7.2, 7.3, 7.4
### Description: Write comprehensive integration tests and add inline documentation for the arithmetic module
### Details:
Create spec/unit/arithmetic_spec.cr with comprehensive tests covering all arithmetic operations. Test edge cases including very large/small numbers, chained operations, and mixed unit calculations. Add Crystal doc comments to all public methods explaining usage and examples.

