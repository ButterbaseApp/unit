# Task ID: 12
# Title: Implement Avram Integration Module
# Status: pending
# Dependencies: 2, 3, 4, 5
# Priority: low
# Description: Create Lucky/Avram integration for database persistence of measurements
# Details:
Create src/unit/integrations/avram.cr:
```crystal
module Unit
  module Avram
    macro measurement_column(name, type)
      column {{name}}_value : Float64?
      column {{name}}_unit : String?
      
      def {{name}} : {{type}}?
        return nil unless {{name}}_value && {{name}}_unit
        
        unit_enum = {{type}}::Unit.parse({{name}}_unit.not_nil!)
        {{type}}.new({{name}}_value.not_nil!, unit_enum)
      rescue
        nil
      end
      
      def {{name}}=(measurement : {{type}}?)
        if measurement
          self.{{name}}_value = measurement.value.to_f64
          self.{{name}}_unit = measurement.unit.to_s
        else
          self.{{name}}_value = nil
          self.{{name}}_unit = nil
        end
      end
    end
    
    module Validations
      macro validate_measurement(name)
        validate_required {{name}}_value, {{name}}_unit
        
        before_save do
          if {{name}}_value && {{name}}_unit
            {{name}}_unit_enum = {{type}}::Unit.parse?({{name}}_unit.not_nil!)
            add_error(:{{name}}_unit, "is not a valid unit") unless {{name}}_unit_enum
          end
        end
      end
    end
  end
end
```
- Store as two columns: value (numeric) and unit (string)
- Handle nullable measurement columns
- Provide validation helpers
- Auto-convert between database and object representation

# Test Strategy:
Test with actual Avram models, verify nullable column handling, test validation of invalid units, test round-trip persistence, verify query capabilities

# Subtasks:
## 1. Create Avram module structure and measurement_column macro [pending]
### Dependencies: None
### Description: Set up the base Avram integration module with the measurement_column macro that defines the two-column storage pattern
### Details:
Create src/unit/integrations/avram.cr with the Unit::Avram module. Implement the measurement_column macro that generates two columns (_value and _unit) for each measurement field. The macro should define column declarations using Avram's column DSL for Float64? value storage and String? unit storage.

## 2. Implement getter method for measurement reconstruction [pending]
### Dependencies: 12.1
### Description: Add the getter method generation to the measurement_column macro that reconstructs measurement objects from database columns
### Details:
Within the measurement_column macro, generate a getter method that returns the appropriate measurement type or nil. The method should check if both _value and _unit columns have values, parse the unit string into the appropriate enum using Unit.parse, and construct a new measurement instance. Include error handling to return nil if parsing fails.

## 3. Implement setter method for measurement persistence [pending]
### Dependencies: 12.1
### Description: Add the setter method generation to store measurement objects as separate value and unit columns
### Details:
Generate a setter method within the measurement_column macro that accepts a measurement object or nil. When given a measurement, extract the value as Float64 and unit as string, storing them in the respective columns. When given nil, set both columns to nil. Ensure the setter properly handles the conversion from BigDecimal to Float64.

## 4. Create Validations module with validate_measurement macro [pending]
### Dependencies: 12.1
### Description: Implement the Validations module with helpers for validating measurement columns
### Details:
Create the Unit::Avram::Validations module containing the validate_measurement macro. The macro should use Avram's validate_required for both value and unit fields when they should be present together. Add a before_save callback that validates the unit string can be parsed into a valid enum value, adding an error to the unit field if parsing fails.

## 5. Add query helpers and integration tests [pending]
### Dependencies: 12.1, 12.2, 12.3, 12.4
### Description: Create query helpers for working with measurement columns and comprehensive integration tests
### Details:
Add helper methods or macros for common query operations like finding records within a measurement range or with specific units. Create integration tests using actual Avram models with different measurement types (Weight, Length, etc.) to verify the full persistence cycle, nullable column handling, and query capabilities.

