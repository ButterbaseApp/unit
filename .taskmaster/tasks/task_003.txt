# Task ID: 3
# Title: Create Unit Enum System for Weight
# Status: done
# Dependencies: 2
# Priority: high
# Description: Implement the Weight measurement type with comprehensive unit enums and conversion factors
# Details:
Create src/unit/measurements/weight.cr:
```crystal
module Unit
  class Weight < Measurement(Weight, Weight::Unit)
    enum Unit
      Gram
      Kilogram
      Milligram
      Tonne
      Pound
      Ounce
      Slug
      
      # Aliases
      G = Gram
      Kg = Kilogram
      Mg = Milligram
      T = Tonne
      Lb = Pound
      Oz = Ounce
    end
    
    CONVERSION_FACTORS = {
      Unit::Gram => BigDecimal.new("1"),
      Unit::Kilogram => BigDecimal.new("1000"),
      Unit::Milligram => BigDecimal.new("0.001"),
      Unit::Tonne => BigDecimal.new("1000000"),
      Unit::Pound => BigDecimal.new("453.59237"),
      Unit::Ounce => BigDecimal.new("28.349523125"),
      Unit::Slug => BigDecimal.new("14593.903")
    }
  end
end
```
- Use gram as the base unit for all conversions
- Store precise conversion factors using BigDecimal
- Implement both full names and common abbreviations as enum aliases

# Test Strategy:
Test all enum values are accessible, verify conversion factors against NIST standards, test enum aliases work correctly, ensure compile-time type checking for Weight::Unit

# Subtasks:
## 1. Create Weight Module Structure and Unit Enum [done]
### Dependencies: None
### Description: Set up the basic Weight class structure with the Unit enum containing all weight units and their aliases
### Details:
Create the file src/unit/measurements/weight.cr and implement the Weight class that inherits from Measurement(Weight, Weight::Unit). Define the Unit enum with all weight units: Gram, Kilogram, Milligram, Tonne, Pound, Ounce, and Slug. Also implement the enum aliases (G, Kg, Mg, T, Lb, Oz) for convenience. Ensure the module structure follows the established pattern from the base Measurement class.

## 2. Implement Conversion Factors with BigDecimal Precision [done]
### Dependencies: 3.1
### Description: Define the CONVERSION_FACTORS constant with precise conversion values using BigDecimal for all weight units
### Details:
Implement the CONVERSION_FACTORS hash constant that maps each Unit enum value to its conversion factor relative to grams (the base unit). Use BigDecimal for all values to ensure precision: Gram => 1, Kilogram => 1000, Milligram => 0.001, Tonne => 1000000, Pound => 453.59237, Ounce => 28.349523125, Slug => 14593.903. Research and verify these conversion factors against NIST standards to ensure accuracy.

## 3. Add Metric System Validation and Conversion Logic [done]
### Dependencies: 3.1, 3.2
### Description: Implement methods to identify metric units and optimize conversions within the metric system
### Details:
Add helper methods to identify which units belong to the metric system (gram, kilogram, milligram, tonne) and implement optimized conversion logic for metric-to-metric conversions. This could include methods like `metric?` on the Unit enum and special handling in the conversion logic to avoid unnecessary precision loss when converting between metric units.

## 4. Implement Imperial Unit Conversions and Relationships [done]
### Dependencies: 3.1, 3.2
### Description: Add specialized handling for imperial unit conversions and their relationships
### Details:
Implement additional logic for imperial units (pound, ounce) including their relationships (16 ounces = 1 pound). Consider adding convenience methods for common conversions and ensure proper handling of the slug unit which is less common but important for physics calculations. Add validation to ensure conversion accuracy between imperial units.

## 5. Add Unit Symbol Support and String Representations [done]
### Dependencies: 3.1
### Description: Implement methods to get standard symbols and string representations for each weight unit
### Details:
Add methods to the Unit enum to return standard symbols (e.g., 'g' for gram, 'kg' for kilogram, 'lb' for pound) and full string representations. This should include both singular and plural forms, and potentially support for different formatting styles (abbreviated vs full). Consider implementing a `to_s` method and a `symbol` method on the enum.

