# Task ID: 5
# Title: Create Unit Enum System for Volume
# Status: done
# Dependencies: 2
# Priority: high
# Description: Implement the Volume measurement type with liquid volume units
# Details:
Create src/unit/measurements/volume.cr:
```crystal
module Unit
  class Volume < Measurement(Volume, Volume::Unit)
    enum Unit
      Liter
      Milliliter
      Gallon
      Quart
      Pint
      Cup
      FluidOunce
      
      # Aliases
      L = Liter
      Ml = Milliliter
      Gal = Gallon
      Qt = Quart
      Pt = Pint
      FlOz = FluidOunce
    end
    
    CONVERSION_FACTORS = {
      Unit::Liter => BigDecimal.new("1"),
      Unit::Milliliter => BigDecimal.new("0.001"),
      Unit::Gallon => BigDecimal.new("3.785411784"),  # US gallon
      Unit::Quart => BigDecimal.new("0.946352946"),   # US quart
      Unit::Pint => BigDecimal.new("0.473176473"),    # US pint
      Unit::Cup => BigDecimal.new("0.2365882365"),    # US cup
      Unit::FluidOunce => BigDecimal.new("0.0295735295735") # US fl oz
    }
  end
end
```
- Use liter as base unit
- Focus on US liquid measurements (can add UK imperial in future)
- Maintain high precision for cooking/recipe applications

# Test Strategy:
Test conversions against NIST Handbook 44, verify US liquid measurement relationships (1 gal = 4 qt = 8 pt = 16 cups), test precision for common recipe conversions

# Subtasks:
## 1. Create Volume measurement file structure [done]
### Dependencies: None
### Description: Set up the Volume measurement class file with proper module structure and imports
### Details:
Create src/unit/measurements/volume.cr file with the Unit module namespace. Import required dependencies including BigDecimal for precision calculations and the base Measurement class. Set up the class definition extending from Measurement(Volume, Volume::Unit) to establish the generic type constraints.

## 2. Define Volume Unit enum with US liquid measurements [done]
### Dependencies: 5.1
### Description: Implement the Unit enum containing all US liquid volume units and their aliases
### Details:
Define the Unit enum within the Volume class containing: Liter, Milliliter, Gallon, Quart, Pint, Cup, and FluidOunce. Add shorter aliases: L = Liter, Ml = Milliliter, Gal = Gallon, Qt = Quart, Pt = Pint, FlOz = FluidOunce. Ensure enum values follow Crystal naming conventions and are accessible as Volume::Unit members.

## 3. Implement CONVERSION_FACTORS with high-precision values [done]
### Dependencies: 5.2
### Description: Create the conversion factors hash with BigDecimal values for accurate conversions
### Details:
Define CONVERSION_FACTORS constant hash mapping each Unit enum to its BigDecimal conversion factor to liters (base unit). Use high-precision values: Liter = 1, Milliliter = 0.001, Gallon = 3.785411784 (US), Quart = 0.946352946 (US), Pint = 0.473176473 (US), Cup = 0.2365882365 (US), FluidOunce = 0.0295735295735 (US). Ensure all values are wrapped in BigDecimal.new() for precision.

## 4. Add Volume-specific conversion validations [done]
### Dependencies: 5.3
### Description: Implement validation logic to ensure volume conversions maintain precision for cooking/recipe applications
### Details:
Override or extend any necessary methods from the base Measurement class to ensure volume conversions maintain required precision for cooking applications. Consider adding validation for common recipe conversions (e.g., tablespoons to cups, teaspoons to milliliters if needed in future). Ensure conversion methods handle edge cases like very small volumes (drops) or very large volumes (industrial quantities).

## 5. Document Volume class with usage examples [done]
### Dependencies: 5.4
### Description: Add comprehensive documentation and code examples for the Volume measurement type
### Details:
Add Crystal documentation comments to the Volume class explaining its purpose, supported units, and precision guarantees. Include code examples showing: creating volume measurements (Volume.new(2.5, :cups)), converting between units (volume.to(:liters)), and common recipe conversions. Document that this implementation focuses on US liquid measurements with notes about future UK imperial support. Add notes about precision requirements for cooking applications.

