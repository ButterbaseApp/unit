# Task ID: 4
# Title: Create Unit Enum System for Length
# Status: done
# Dependencies: 2
# Priority: high
# Description: Implement the Length measurement type with metric and imperial units
# Details:
Create src/unit/measurements/length.cr:
```crystal
module Unit
  class Length < Measurement(Length, Length::Unit)
    enum Unit
      Meter
      Centimeter
      Millimeter
      Kilometer
      Inch
      Foot
      Yard
      Mile
      
      # Aliases
      M = Meter
      Cm = Centimeter
      Mm = Millimeter
      Km = Kilometer
      In = Inch
      Ft = Foot
      Yd = Yard
      Mi = Mile
    end
    
    CONVERSION_FACTORS = {
      Unit::Meter => BigDecimal.new("1"),
      Unit::Centimeter => BigDecimal.new("0.01"),
      Unit::Millimeter => BigDecimal.new("0.001"),
      Unit::Kilometer => BigDecimal.new("1000"),
      Unit::Inch => BigDecimal.new("0.0254"),
      Unit::Foot => BigDecimal.new("0.3048"),
      Unit::Yard => BigDecimal.new("0.9144"),
      Unit::Mile => BigDecimal.new("1609.344")
    }
  end
end
```
- Use meter as the base unit
- Include both metric (SI) and imperial units
- Store exact conversion factors per international standards

# Test Strategy:
Verify conversion factors against ISO 31-1 standards, test all unit enums and aliases, cross-check imperial to metric conversions for accuracy

# Subtasks:
## 1. Create Length measurement class file structure [done]
### Dependencies: None
### Description: Set up the basic file structure and module hierarchy for the Length measurement type
### Details:
Create the file src/unit/measurements/length.cr and establish the module Unit namespace. Define the Length class that inherits from Measurement(Length, Length::Unit). This will serve as the foundation for the Length measurement implementation.

## 2. Define Length Unit enum with metric and imperial units [done]
### Dependencies: 4.1
### Description: Implement the Unit enum inside the Length class with all required metric and imperial length units
### Details:
Define the Unit enum with values: Meter, Centimeter, Millimeter, Kilometer (metric) and Inch, Foot, Yard, Mile (imperial). Also create short aliases for convenience: M = Meter, Cm = Centimeter, Mm = Millimeter, Km = Kilometer, In = Inch, Ft = Foot, Yd = Yard, Mi = Mile. Ensure the enum follows Crystal's naming conventions and is properly scoped within the Length class.

## 3. Implement CONVERSION_FACTORS hash with precise values [done]
### Dependencies: 4.2
### Description: Create the CONVERSION_FACTORS constant hash mapping each unit to its conversion factor relative to meters
### Details:
Define CONVERSION_FACTORS as a Hash(Unit, BigDecimal) with meter as the base unit (factor 1.0). Include precise conversion factors based on international standards: Meter => 1, Centimeter => 0.01, Millimeter => 0.001, Kilometer => 1000, Inch => 0.0254 (exactly), Foot => 0.3048 (exactly), Yard => 0.9144 (exactly), Mile => 1609.344 (exactly). Use BigDecimal for all values to ensure precision.

## 4. Add unit validation and base unit methods [done]
### Dependencies: 4.3
### Description: Implement methods to validate units and identify the base unit for the Length measurement type
### Details:
Add a class method `base_unit` that returns Unit::Meter. Implement a `valid_unit?` method that checks if a given unit belongs to Length::Unit enum. Add a `conversion_factor` method that returns the BigDecimal conversion factor for a given unit from the CONVERSION_FACTORS hash. These methods will be used by the parent Measurement class for conversions.

## 5. Create comprehensive unit tests for Length measurement [done]
### Dependencies: 4.4
### Description: Write thorough spec tests covering all aspects of the Length measurement implementation
### Details:
Create spec/unit/measurements/length_spec.cr with tests for: enum value accessibility, alias functionality, conversion factor accuracy (comparing against known standards), base unit identification, and integration with the Measurement parent class. Include edge cases like very large/small conversions and ensure BigDecimal precision is maintained throughout.

