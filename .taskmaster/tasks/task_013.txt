# Task ID: 13
# Title: Create Migration Helpers for Avram
# Status: pending
# Dependencies: 12
# Priority: medium
# Description: Implement database migration helpers for measurement columns
# Details:
Create src/unit/integrations/avram/migration_helpers.cr:
```crystal
module Unit
  module Avram
    module MigrationHelpers
      macro add_measurement_column(table, name, type, **options)
        add {{name}}_value : Float64?, 
            precision: {{options[:precision] || 15}}, 
            scale: {{options[:scale] || 6}}
        add {{name}}_unit : String, 
            size: {{options[:unit_size] || 20}}
        
        {% if options[:required] %}
          alter table_for({{table}}) do
            make_required {{name}}_value
            make_required {{name}}_unit
          end
        {% end %}
        
        {% if options[:index] %}
          create_index table_for({{table}}), :{{name}}_value
        {% end %}
      end
      
      macro remove_measurement_column(table, name)
        alter table_for({{table}}) do
          remove :{{name}}_value
          remove :{{name}}_unit
        end
      end
      
      macro change_measurement_precision(table, name, precision, scale)
        alter table_for({{table}}) do
          change_type {{name}}_value : Float64, 
                      precision: {{precision}}, 
                      scale: {{scale}}
        end
      end
    end
  end
end
```
- Provide macros for common migration operations
- Support precision/scale configuration
- Handle indexing for range queries
- Include helpers for changing column properties

# Test Strategy:
Test migration generation produces valid SQL, verify column constraints are applied correctly, test with various database adapters, verify rollback operations

# Subtasks:
## 1. Implement Core Migration Macros [pending]
### Dependencies: None
### Description: Create the base MigrationHelpers module with add_measurement_column and remove_measurement_column macros
### Details:
Implement the core module structure and the two primary macros:
- add_measurement_column: Creates both _value (Float64) and _unit (String) columns with configurable precision, scale, and unit field size
- remove_measurement_column: Removes both associated columns
- Ensure proper Crystal macro syntax with interpolation
- Handle table_for resolution for Avram compatibility

## 2. Add Column Constraint Support [pending]
### Dependencies: 13.1
### Description: Implement support for required columns and null constraints in the migration macros
### Details:
Extend add_measurement_column macro to handle:
- :required option that makes both _value and _unit columns non-nullable
- Use Avram's make_required within an alter block
- Ensure constraints are applied after column creation
- Handle edge cases where only one column needs to be required

## 3. Implement Index Creation Support [pending]
### Dependencies: 13.1
### Description: Add indexing capabilities for measurement value columns to optimize range queries
### Details:
Add index support to add_measurement_column:
- Check for :index option in macro parameters
- Create index only on _value column (numeric queries)
- Use Avram's create_index with proper table reference
- Consider composite indexes for value+unit if needed
- Handle index naming conventions

## 4. Create Column Modification Helpers [pending]
### Dependencies: 13.1
### Description: Implement change_measurement_precision macro for altering existing measurement columns
### Details:
Create change_measurement_precision macro that:
- Alters precision and scale of existing _value columns
- Uses Avram's change_type within alter block
- Preserves existing data while changing column properties
- Handles potential data truncation warnings
- Supports migration rollback

## 5. Add Advanced Migration Helpers [pending]
### Dependencies: 13.1, 13.2, 13.3, 13.4
### Description: Create additional helper macros for common measurement column operations
### Details:
Implement additional helpers:
- add_measurement_index: Add index to existing measurement columns
- rename_measurement_column: Rename both _value and _unit columns atomically
- add_measurement_default: Set default values for measurement columns
- add_measurement_check_constraint: Add CHECK constraints for valid ranges
- migrate_to_measurement: Convert existing single columns to measurement pairs

