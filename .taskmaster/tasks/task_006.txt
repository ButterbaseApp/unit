# Task ID: 6
# Title: Implement Unit Conversion System
# Status: done
# Dependencies: 3, 4, 5
# Priority: high
# Description: Create the conversion module for transforming between units within the same measurement type
# Details:
Create src/unit/conversion.cr:
```crystal
module Unit
  module Conversion
    def convert_to(target_unit : U) : self
      return self if @unit == target_unit
      
      # Convert to base unit, then to target
      base_value = to_base_unit_value
      target_factor = self.class::CONVERSION_FACTORS[target_unit]
      new_value = base_value / target_factor
      
      self.class.new(new_value, target_unit)
    end
    
    def to(target_unit : U) : self
      convert_to(target_unit)
    end
    
    private def to_base_unit_value : BigDecimal
      @value * self.class::CONVERSION_FACTORS[@unit]
    end
  end
end
```
- Include this module in Measurement class
- Implement two-step conversion: source → base → target
- Cache conversion results for repeated operations
- Add alias method `to` for more natural API

# Test Strategy:
Test round-trip conversions maintain precision, verify conversion accuracy with known values, test edge cases (very large/small numbers), benchmark conversion performance

# Subtasks:
## 1. Create conversion module file and basic structure [done]
### Dependencies: None
### Description: Set up the src/unit/conversion.cr file with the module structure and namespace
### Details:
Create the file src/unit/conversion.cr and define the module Unit::Conversion with proper Crystal module syntax. This will serve as the foundation for all conversion functionality.

## 2. Implement convert_to method with unit conversion logic [done]
### Dependencies: 6.1
### Description: Create the main convert_to method that handles the two-step conversion process
### Details:
Implement the convert_to method that: 1) Returns self if units match, 2) Converts the current value to base unit value using to_base_unit_value, 3) Gets the target unit's conversion factor from CONVERSION_FACTORS, 4) Calculates the new value by dividing base value by target factor, 5) Returns a new instance with converted value and target unit

## 3. Implement to_base_unit_value private method [done]
### Dependencies: 6.1
### Description: Create the helper method that converts any unit value to its base unit representation
### Details:
Implement the private to_base_unit_value method that multiplies the current value by the conversion factor for the current unit from CONVERSION_FACTORS. This method is crucial for the two-step conversion process and should handle BigDecimal arithmetic for precision.

## 4. Add the 'to' alias method for natural API [done]
### Dependencies: 6.2
### Description: Create the 'to' method as an alias for convert_to to provide a more fluent API
### Details:
Implement the 'to' method that simply delegates to convert_to, allowing users to write more natural expressions like 'distance.to(:meters)' instead of 'distance.convert_to(:meters)'

## 5. Include Conversion module in Measurement class [done]
### Dependencies: 6.1, 6.2, 6.3, 6.4
### Description: Integrate the Conversion module into the Measurement class to enable conversion functionality
### Details:
Update the Measurement class definition to include Unit::Conversion module. Ensure the module has access to necessary instance variables (@value, @unit) and class constants (CONVERSION_FACTORS). May need to add any necessary accessor methods if not already present.

